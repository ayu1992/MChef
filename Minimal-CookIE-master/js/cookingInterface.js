// Generated by CoffeeScript 1.7.1

/* Steps information */
var Step, animationMoveProgressBarUp, animationMoveThisStepFromLeftToRight, animationMoveThisStepFromRightToLeft, calculatePercentage, calculateRemainTime, checkFinishPercentageAndChangeTitle, checkNextStep, checkWaitingStepBlocking, checkWaitingStepsFinish, cookingEnded, cookingStarted, dx, extendStepInfo, finishedShowStatus, loadBlockingStep, loadStep, pushStepToWaitingQueue, showTwoUrgentSteps, startTimer, stopTimer, timer, updateThisStepTime, updateWaitingProgressBar;

Step = (function() {

  /* For logging the time used in every step */
  function Step(stepNum, recipeId, stepId, timeDiff) {
    this.stepNum = stepNum;
    this.recipeId = recipeId;
    this.stepId = stepId;
    this.timeDiff = timeDiff;
  }

  return Step;

})();

extendStepInfo = function(step) {

  /* For to be used in related functions */
  step.duration = convertTimeToSeconds(step.time);
  step.finishTime = step.startTime + step.duration;
  step.timeElapsed = 0;
  step.percentage = 0;
  step.remainTime = calculateRemainTime(step);
  return step;
};

calculateRemainTime = function(step) {
  return step.remainTime = step.duration - step.timeElapsed;
};

calculatePercentage = function(step) {
  var remainTime;
  remainTime = calculateRemainTime(step);
  step.percentage = Math.floor(remainTime / step.duration * 100);
  return step.percentage + "%";
};


/* Function definitions */

cookingStarted = function() {

  /* Check if cooking data exist. It should exist when this is called but check anyways. */
  var currentStepNum, finishPercentage;
  if (window.cookingData == null) {
    return;
  }
  $.ui.disableSideMenu();
  currentStepNum = window.currentStepNum;
  if (currentStepNum === 0) {
    window.currentTime = 0;
    window.waitingStepQueue = [];
    window.stepsTimeUsed = [];
    window.cookingStartTime = new Date();
  }
  console.log("cooking started");
  $(".waiting_step_outer_wrapper").addClass('invisible');
  finishPercentage = Math.ceil((currentStepNum + 1) / window.cookingData.steps.length * 100);
  $("#Step").attr("data-title", "Step " + (currentStepNum + 1) + " (" + finishPercentage + "%)");
  loadStep(currentStepNum);
  setTimeout(function() {
    return timer();
  }, 1000);
};

cookingEnded = function() {
  stopTimer();
  return $.ui.enableSideMenu();
};


/* Timer: for clocking the cook process */

timer = function() {
  window.currentStep.timeElapsed += 1;
  window.waitingStepQueue.forEach(function(step) {
    if (step !== window.currentStep) {
      step.timeElapsed += 1;
    }
    return calculateRemainTime(step);
  });

  /* Check waiting queue status */
  checkWaitingStepsFinish();

  /* Update progress bars */
  updateThisStepTime();
  showTwoUrgentSteps();
  startTimer();
};

startTimer = function() {
  clearTimeout(window.lastId);
  window.lastId = setTimeout(function() {
    return timer();
  }, 1000);
};

stopTimer = function() {
  return clearTimeout(window.lastId);
};


/* Steps */

loadStep = function(stepNum) {
  var nextBtn, nextStep, scope, thisStep;
  console.log("load step#" + stepNum);
  thisStep = window.cookingData.steps[stepNum];
  window.currentTime = thisStep.startTime;
  window.currentStep = extendStepInfo(thisStep);
  window.currentStepNum = stepNum;
  animationMoveThisStepFromLeftToRight();
  checkFinishPercentageAndChangeTitle();
  scope = $("#Step");
  scope.find(".this_step_recipe_name").html(thisStep.recipeName);
  scope.find(".this_step_digest").html(thisStep.digest);
  nextStep = window.cookingData.steps[stepNum + 1];
  if (nextStep != null) {
    scope.find(".next_step_name").html(trimStringLength("Next: " + nextStep.stepName));
    scope.find(".this_step_time").html("" + thisStep.timeElapsed + "/" + thisStep.time);
    scope.find(".step_next_btn").html("下一步");
  } else {
    scope.find(".next_step_name").html("最後一步");
    scope.find(".next_step_time").html("");
    scope.find(".step_next_btn").html("完成");
  }
  nextBtn = scope.find(".step_next_btn");
  nextBtn.unbind('click');
  nextBtn.click(function() {
    clearTimeout(window.btnTimeoutId);
    window.btnTimeoutId = setTimeout(function() {
      return checkNextStep();
    }, 1000);
  });
};

loadBlockingStep = function(index) {
  var nextBtn, scope, step;
  console.log("load blocking step, index:" + index);
  step = window.waitingStepQueue[index];
  console.log(step);
  showTwoUrgentSteps();
  window.currentStep = step;
  animationMoveThisStepFromRightToLeft();
  scope = $("#Step");
  scope.find(".this_step_recipe_name").html(step.recipeName);
  scope.find(".this_step_digest").html("" + step.digest);
  nextBtn = scope.find(".step_next_btn");
  nextBtn.html("等待完成");
  nextBtn.unbind('click');
  nextBtn.click(function() {
    clearTimeout(window.btnTimeoutId);
    window.btnTimeoutId = setTimeout(function() {
      window.waitingStepQueue.splice(index, 1)[0];
      return checkNextStep(true);
    }, 1000);
  });
};

pushStepToWaitingQueue = function(step, currentTime) {
  console.log("push " + window.currentStepNum + ": " + step.digest + " into queue");
  window.waitingStepQueue.push(step);
  window.waitingStepQueue.sort(function(a, b) {
    return b.remainTime - a.remainTime;
  });
  console.log(window.waitingStepQueue);
  showTwoUrgentSteps();
};


/* Checks */

checkNextStep = function(blocked) {
  var nextStep, stepNum, thisStep, thisStepFinishTime, timeDiff;
  if (blocked == null) {
    blocked = 0;
  }
  thisStep = window.currentStep;
  thisStepFinishTime = thisStep.finishTime;
  if ((nextStep = window.cookingData.steps[window.currentStepNum + 1]) == null) {

    /* There is no next step */
    console.log("finished");
    $.ui.loadContent("Finish");
    return;
  }
  if (!thisStep.people && !blocked) {
    animationMoveProgressBarUp();
    pushStepToWaitingQueue(thisStep);
  }

  /* Check if there is a step blocking in the waiting queue */
  if (checkWaitingStepBlocking(thisStep, nextStep)) {
    $("#Step").find(".step_next_btn").html("等待完成");
    return;
  }

  /* No blocking step -> load next step */
  timeDiff = nextStep.startTime - (thisStep.startTime + thisStep.timeElapsed);
  stepNum = !blocked ? window.currentStepNum : window.cookingData.steps.lastIndexOf(thisStep);
  window.stepsTimeUsed.push(new Step(stepNum, thisStep.recipeId, thisStep.stepId, timeDiff));
  loadStep(window.currentStepNum + 1);
};

checkWaitingStepBlocking = function(thisStep, nextStep) {
  var flag, waitingQueue;
  flag = false;
  waitingQueue = window.waitingStepQueue;
  if (thisStep.finishTime < nextStep.startTime) {

    /* This step does not directly lead to next step -> there is a blocking step in waiting queue */
    waitingQueue.forEach(function(waitingStep) {
      var waitingStepIndex;
      if (waitingStep.finishTime === nextStep.startTime) {

        /* The blocking step is found */
        console.log("blocking case 1");
        console.log(waitingStep);
        console.log(nextStep);
        waitingStepIndex = waitingQueue.lastIndexOf(waitingStep);
        loadBlockingStep(waitingStepIndex);
        flag = true;
      }
    });
  }
  if (flag === true) {
    return flag;
  }

  /* Check the waiting steps for next step's previous steps */
  waitingQueue.forEach(function(waitingStep) {
    var waitingStepIndex;
    if (waitingStep.recipeId === nextStep.recipeId) {

      /* There is a step with the same recipeId as next step in the waiting queue. */
      console.log("blocking case 2");
      console.log(waitingStep);
      console.log(nextStep);
      waitingStepIndex = waitingQueue.lastIndexOf(waitingStep);
      loadBlockingStep(waitingStepIndex);
      flag = true;
    }
  });
  return flag;
};

checkWaitingStepsFinish = function() {
  var queue, queueLen;
  queue = window.waitingStepQueue;
  queueLen = queue.length;
  queue.forEach(function(waitingStep) {
    var index, step;
    if (waitingStep.remainTime <= 0) {

      /* Finished */
      console.log("Finished:");
      console.log(waitingStep);
      index = queue.lastIndexOf(waitingStep);
      step = queue.splice(index, 1)[0];
      showTwoUrgentSteps();
      alert("Step finished: " + step.digest);
    }
  });
};

checkFinishPercentageAndChangeTitle = function() {
  var finishPercentage, stepNum;
  stepNum = window.currentStepNum;
  finishPercentage = Math.ceil((stepNum + 1) / window.cookingData.steps.length * 100);
  $.ui.setTitle("Step " + (stepNum + 1) + " (" + finishPercentage + "%)");
};


/* Update functions */

showTwoUrgentSteps = function() {
  var nextNextStep, nextStep, queueLen, waitingQueue;
  waitingQueue = window.waitingStepQueue;
  queueLen = waitingQueue.length;
  nextStep = waitingQueue[queueLen - 1];
  nextNextStep = waitingQueue[queueLen - 2];
  if (queueLen === 1) {
    updateWaitingProgressBar($("#NextNextWaitingStep"), nextStep);
    updateWaitingProgressBar($("#NextWaitingStep"), nextNextStep);
  } else {
    updateWaitingProgressBar($("#NextNextWaitingStep"), nextNextStep);
    updateWaitingProgressBar($("#NextWaitingStep"), nextStep);
  }

  /*
  	if nextStep? and nextNextStep?
  		console.log "enough steps. steps:#{nextStep.stepNum}, #{nextNextStep.stepNum}"
  	else if nextStep?
  		console.log "not enough steps. step:#{nextStep.stepNum}"
  	else
  		console.log "no step waiting"
   */
};

updateThisStepTime = function() {
  var thisStep, timeElapsed, wrapper;
  thisStep = window.currentStep;
  timeElapsed = parseSecondsToTime(thisStep.timeElapsed);
  wrapper = $(".this_step_inner_wrapper");
  wrapper.find(".this_step_time").html("" + timeElapsed + "/" + thisStep.time);
};

updateWaitingProgressBar = function(scope, step) {
  var progressBar, progressName, progressRemainTime;
  progressBar = scope.find("#ProgressBar");
  progressName = scope.find("#ProgressName");
  progressRemainTime = scope.find("#ProgressRemainTime");
  if (step == null) {

    /* step = null: hide empty progress bar */
    $(scope[0].parentNode).addClass('invisible');
  } else {
    progressBar.css3Animate({
      width: "" + (calculatePercentage(step)) + "%",
      time: '50ms'
    });
    progressName.html(trimStringLength(step.stepName));
    progressRemainTime.html(parseSecondsToTime(step.remainTime));
    $(scope[0].parentNode).removeClass('invisible');
  }
};

finishedShowStatus = function() {
  var scope, timeElapsed;
  $(".next_step_outer_wrapper").remove();
  $('#steps_container').html('&nbsp;' + '<div class="waiting_step_outer_wrapper invisible">' + '<div id="NextNextWaitingStep" class="waiting_step_inner_wrapper">' + '<div id="ProgressBar" class="waiting_step_progress next_step">&nbsp;</div>' + '<h4 id="ProgressName" class="waiting_step_name">Next next waiting step</h4>' + '<h4 id="ProgressRemainTime" class="waiting_step_time">00:00:00</h4>' + '</div>' + '</div>' + '<div class="waiting_step_spacer">&nbsp;</div>' + '<div class="waiting_step_outer_wrapper invisible">' + '<div id="NextWaitingStep" class="waiting_step_inner_wrapper">' + '<div id="ProgressBar" class="waiting_step_progress next_step">&nbsp;</div>' + '<h4 id="ProgressName" class="waiting_step_name">Next waiting step</h4>' + '<h4 id="ProgressRemainTime" class="waiting_step_time">00:00:00</h4>' + '</div>' + '</div>' + '<div class="waiting_step_spacer">&nbsp;</div>' + '<div class="this_step_outer_wrapper">' + '<div id="ThisStep" class="this_step_inner_wrapper">' + '<div class="h7 this_step_recipe_name" id="this_step_recipe_name">' + '</div>' + '<h3 class="this_step_digest">' + '</h3>' + '<h4 id="ProgressRemainTime" class="this_step_time"></h4>' + '</div>' + '</div>' + '<div class="next_step_outer_wrapper nextstep" data-sn=0>' + '<div id="NextStep" class="next_step_inner_wrapper">' + '<div id="ProgressBar" class="next_step_progress invisible">&nbsp;</div>' + '<h4 id="ProgressName" class="next_step_name"></h4>' + '</div> ' + '</div>' + '<div class="step_spacer">&nbsp;</div>' + '<div class="bottom_btn_holder step_next_btn_wrapper">' + '<a class="button step_next_btn" style="background-color:hsl(204.1,35%,53.1%); position:absolute;color:white;border:none;">Next </a>' + '</div>');
  timeElapsed = (new Date()) - window.cookingStartTime;
  timeElapsed = parseSecondsToTime(Math.floor(timeElapsed / 1000));
  scope = $("#Finish");
  scope.find("#TotalTimeSpent").html(timeElapsed);
  scope.find("#OriginalTime").html(window.cookingData.originTime);
};


/* Animation functions */

dx = 0.04 * parseInt($(window).width());

animationMoveThisStepFromLeftToRight = function() {
  var thisStep;
  thisStep = window.currentStep;
  $('.this_step_inner_wrapper').addClass('animate_old');
  $('.this_step_inner_wrapper.animate_old').find('.this_step_recipe_name').removeClass('this_step_recipe_name');
  $('.this_step_inner_wrapper.animate_old').find('.this_step_digest').removeClass('this_step_digest');
  $('.this_step_inner_wrapper.animate_old').find('.this_step_time').removeClass('this_step_time');
  $('.this_step_outer_wrapper').append($('<div class="this_step_inner_wrapper animate_new">'));
  $('.this_step_inner_wrapper.animate_new').append($('<div class="this_step_recipe_name">').html(thisStep.recipeName));
  $('.this_step_inner_wrapper.animate_new').append($('<h3 class="this_step_digest">').html(thisStep.digest));
  $('.this_step_inner_wrapper.animate_new').append($('<h4 id="ProgressRemainTime" class="this_step_time">').html("" + (parseSecondsToTime(thisStep.timeElapsed)) + "/" + thisStep.time));
  $('.this_step_inner_wrapper.animate_old').css3Animate({
    x: dx,
    time: 90,
    opacity: 0.1,
    success: function() {
      $('.this_step_inner_wrapper.animate_old').remove();
    }
  });
  $('.this_step_inner_wrapper.animate_new').css3Animate({
    x: -dx,
    time: 90,
    success: function() {
      $('.this_step_inner_wrapper.animate_new').css3Animate({
        x: dx,
        time: 90,
        previous: true,
        success: function() {
          $('.animate_new').removeClass('animate_new');
        }
      });
    }
  });
};

animationMoveThisStepFromRightToLeft = function() {
  var thisStep;
  thisStep = window.currentStep;
  $('.this_step_inner_wrapper').addClass('animate_old');
  $('.this_step_inner_wrapper.animate_old').find('.this_step_recipe_name').removeClass('this_step_recipe_name');
  $('.this_step_inner_wrapper.animate_old').find('.this_step_digest').removeClass('this_step_digest');
  $('.this_step_inner_wrapper.animate_old').find('.this_step_time').removeClass('this_step_time');
  $('.this_step_outer_wrapper').append($('<div class="this_step_inner_wrapper animate_new">'));
  $('.this_step_inner_wrapper.animate_new').append($('<div class="this_step_recipe_name">').html(thisStep.recipeName));
  $('.this_step_inner_wrapper.animate_new').append($('<h3 class="this_step_digest">').html(thisStep.digest));
  $('.this_step_inner_wrapper.animate_new').append($('<h4 id="ProgressRemainTime" class="this_step_time">').html("" + (parseSecondsToTime(thisStep.timeElapsed)) + "/" + thisStep.time));
  $('.this_step_inner_wrapper.animate_old').css3Animate({
    x: -dx,
    time: 100,
    success: function() {
      $('.this_step_inner_wrapper.animate_old').remove();
    }
  });
  $('.this_step_inner_wrapper.animate_new').css3Animate({
    x: dx,
    time: 90,
    success: function() {
      $('.this_step_inner_wrapper.animate_new').css3Animate({
        x: -dx,
        time: 90,
        previous: true,
        success: function() {
          $('.animate_new').removeClass('animate_new');
        }
      });
    }
  });
};

animationMoveProgressBarUp = function() {
  var afterAnimate, stepNum, thisStep;
  thisStep = window.currentStep;
  stepNum = window.currentStepNum;
  afterAnimate = function() {
    var nextStep, scope, that;
    that = $('.next_step_outer_wrapper.nextstep');
    that.css('top', '2%');
    that.removeClass('nextstep');
    that.css3Animate({
      y: 0,
      time: 10,
      addClass: 'invisible'
    });
    $('#steps_container').append($('<div class="next_step_outer_wrapper nextstep" " data-sn=' + (stepNum + 1) + '>' + '<div id="NextStep" class="next_step_inner_wrapper">' + '<div id="ProgressBar" class="next_step_progress invisible">&nbsp;</div>' + '<h4 id="ProgressName" class="next_step_name">Next: Stirfry mushroom</h4>' + '</div> ' + '</div>'));
    scope = $("#Step");
    nextStep = window.cookingData.steps[stepNum + 1];
    if (nextStep != null) {
      scope.find(".next_step_name").html(trimStringLength("Next: " + nextStep.stepName));
      return scope.find(".next_step_time").html("" + thisStep.timeElapsed + "/" + thisStep.time);
    } else {
      scope.find(".next_step_name").html("最後一步");
      return scope.find(".next_step_time").html("");
    }
  };
  $('.next_step_outer_wrapper.nextstep').addClass("changeName");
  $('.changeName').find('#ProgressName').html(thisStep.digest);
  $('.changeName').find('#ProgressName').removeClass("next_step_name").addClass("waiting_step_name");
  $('.next_step_outer_wrapper.nextstep').removeClass("changeName");
  $('.next_step_outer_wrapper.nextstep').css3Animate({
    y: -0.1 * 7 * parseInt($(window).height() - 44),
    time: 500,
    opacity: 0.1,
    success: afterAnimate
  });
};
